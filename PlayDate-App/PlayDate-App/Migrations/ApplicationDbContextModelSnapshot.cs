// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayDate_App.Data;

namespace PlayDate_App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "07d35063-ee46-4fb5-bdbe-5bd34b98de7f",
                            ConcurrencyStamp = "4a659c1d-f112-422b-9eee-3878fb14a51c",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PlayDate_App.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("ConfirmedEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeAndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("PlayDate_App.Models.EventRegistration", b =>
                {
                    b.Property<int>("EventRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmedAttendance")
                        .HasColumnType("bit");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventRegistrationId");

                    b.HasIndex("EventId");

                    b.HasIndex("ParentId");

                    b.ToTable("EventRegistrations");
                });

            modelBuilder.Entity("PlayDate_App.Models.Friendship", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FriendshipConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FriendshipRequest")
                        .HasColumnType("bit");

                    b.Property<int>("ParentOneId")
                        .HasColumnType("int");

                    b.Property<int>("ParentTwoId")
                        .HasColumnType("int");

                    b.HasKey("FriendshipId");

                    b.HasIndex("ParentOneId");

                    b.HasIndex("ParentTwoId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("PlayDate_App.Models.Kid", b =>
                {
                    b.Property<int>("KidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Immunized")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool>("SpecialNeeds")
                        .HasColumnType("bit");

                    b.Property<bool>("WearsMask")
                        .HasColumnType("bit");

                    b.HasKey("KidId");

                    b.HasIndex("ParentId");

                    b.ToTable("Kids");

                    b.HasData(
                        new
                        {
                            KidId = 1,
                            Age = 10,
                            FirstName = "Stan",
                            Immunized = false,
                            Notes = "'Oh my god, they killed Kenny!'",
                            ParentId = 1,
                            SpecialNeeds = false,
                            WearsMask = false
                        },
                        new
                        {
                            KidId = 2,
                            Age = 13,
                            FirstName = "Shelly",
                            Immunized = false,
                            Notes = "She's got huge headgear braces on her teeth, and enjoys using the word 'turds'",
                            ParentId = 1,
                            SpecialNeeds = false,
                            WearsMask = false
                        },
                        new
                        {
                            KidId = 3,
                            Age = 10,
                            FirstName = "Kyle",
                            Immunized = false,
                            Notes = "Kyle's generally quite calm and patient with those around him... when Cartman isn't involved, anyhow.",
                            ParentId = 2,
                            SpecialNeeds = false,
                            WearsMask = false
                        },
                        new
                        {
                            KidId = 4,
                            Age = 3,
                            FirstName = "Ike",
                            Immunized = false,
                            Notes = "Ike has had no shortage of adventure and mischief in his life",
                            ParentId = 2,
                            SpecialNeeds = false,
                            WearsMask = false
                        },
                        new
                        {
                            KidId = 5,
                            Age = 10,
                            FirstName = "Eric",
                            Immunized = false,
                            Notes = "His mother seems to be the sole person he genuinely cares about",
                            ParentId = 3,
                            SpecialNeeds = false,
                            WearsMask = false
                        },
                        new
                        {
                            KidId = 6,
                            Age = 10,
                            FirstName = "Kenny",
                            Immunized = false,
                            Notes = "'Mrrph rmph rmmph mrrphh!'",
                            ParentId = 4,
                            SpecialNeeds = false,
                            WearsMask = false
                        },
                        new
                        {
                            KidId = 7,
                            Age = 13,
                            FirstName = "Kevin",
                            Immunized = false,
                            Notes = "He likes frozen waffles and reacts with horror to his brother's deaths",
                            ParentId = 4,
                            SpecialNeeds = false,
                            WearsMask = false
                        },
                        new
                        {
                            KidId = 8,
                            Age = 6,
                            FirstName = "Karen",
                            Immunized = false,
                            Notes = "Karen is Kenny's rarely-seen little sister",
                            ParentId = 4,
                            SpecialNeeds = false,
                            WearsMask = false
                        },
                        new
                        {
                            KidId = 9,
                            Age = 10,
                            FirstName = "Leopold 'Butters'",
                            Immunized = false,
                            Notes = "He briefly explored his feminine alter-ego as Marjorine. And he absolutely loves Bennigan's",
                            ParentId = 5,
                            SpecialNeeds = false,
                            WearsMask = false
                        });
                });

            modelBuilder.Entity("PlayDate_App.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThumbsUp")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("PlayDate_App.Models.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<int>("LocationZip")
                        .HasColumnType("int");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThumbsUp")
                        .HasColumnType("int");

                    b.HasKey("ParentId");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            ParentId = 1,
                            FirstName = "Randy",
                            ImagePath = "https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/047ca3dd-33d4-4aae-bcf6-f7210e19fab9/dbcyg7n-7f14f7e7-54fe-47c9-b1f0-42e1b68220aa.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvMDQ3Y2EzZGQtMzNkNC00YWFlLWJjZjYtZjcyMTBlMTlmYWI5XC9kYmN5ZzduLTdmMTRmN2U3LTU0ZmUtNDdjOS1iMWYwLTQyZTFiNjgyMjBhYS5wbmcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.-8Y7Up2Et44DckWFefLVB1IGEiF04CIWSJrDEL6j2ZY",
                            LastName = "Marsh",
                            Lat = 0.0,
                            Lng = 0.0,
                            LocationZip = 80420,
                            SpouseName = "Sharon",
                            ThumbsUp = 0
                        },
                        new
                        {
                            ParentId = 2,
                            FirstName = "Sheila",
                            ImagePath = "",
                            LastName = "Broflovski",
                            Lat = 0.0,
                            Lng = 0.0,
                            LocationZip = 80420,
                            SpouseName = "Gerald",
                            ThumbsUp = 0
                        },
                        new
                        {
                            ParentId = 3,
                            FirstName = "Liane",
                            ImagePath = "",
                            LastName = "Cartman",
                            Lat = 0.0,
                            Lng = 0.0,
                            LocationZip = 80420,
                            SpouseName = "Jack",
                            ThumbsUp = 0
                        },
                        new
                        {
                            ParentId = 4,
                            FirstName = "Stuart",
                            ImagePath = "",
                            LastName = "McCormick",
                            Lat = 0.0,
                            Lng = 0.0,
                            LocationZip = 80420,
                            SpouseName = "Carol",
                            ThumbsUp = 0
                        },
                        new
                        {
                            ParentId = 5,
                            FirstName = "Linda",
                            ImagePath = "",
                            LastName = "Stotch",
                            Lat = 0.0,
                            Lng = 0.0,
                            LocationZip = 80420,
                            SpouseName = "Stephen",
                            ThumbsUp = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayDate_App.Models.Event", b =>
                {
                    b.HasOne("PlayDate_App.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayDate_App.Models.EventRegistration", b =>
                {
                    b.HasOne("PlayDate_App.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayDate_App.Models.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayDate_App.Models.Friendship", b =>
                {
                    b.HasOne("PlayDate_App.Models.Parent", "ParentOne")
                        .WithMany()
                        .HasForeignKey("ParentOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayDate_App.Models.Parent", "ParentTwo")
                        .WithMany()
                        .HasForeignKey("ParentTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayDate_App.Models.Kid", b =>
                {
                    b.HasOne("PlayDate_App.Models.Parent", null)
                        .WithMany("Kids")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayDate_App.Models.Parent", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
